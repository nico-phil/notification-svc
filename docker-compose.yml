version: "3"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-net

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka-net
    healthcheck:
      test:
        [
          "CMD",
          "kafka-broker-api-versions",
          "--bootstrap-server",
          "localhost:9092",
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres
    ports:
      - "5432:5432"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: ${NOTIFICATION_POSTGRES_USER}
      POSTGRES_PASSWORD: ${NOTIFICATION_POSTGRES_PASSWORD}
      POSTGRES_DB: ${NOTIFICATION_POSTGRES_DB}
    networks:
      - kafka-net
    # # volumes:
    # - da./db-data/postgres/:/var/lib/postgresql/ta/

  notification_svc:
    build:
      context: ./notification-svc
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      ENV: ${NOTIFICATION_ENV}
      USER_SERVICE_URL: ${NOTIFICATION_USER_SERVICE_URL}
      BROKER_URL: ${NOTIFICATION_BROKER_URL} # Connect to Kafka using the internal listener
      APP_PORT: ${NOTIFICATION_APP_PORT}
    networks:
      - kafka-net

  user_svc:
    build:
      context: ./user-svc
      dockerfile: Dockerfile
    depends_on:
      - postgres
        # condition: service_healthy
    ports:
      - "3001:3001"
    environment:
      ENV: ${NOTIFICATION_ENV}
      DSN: ${NOTIFICATION_DSN_USERS}
      APP_PORT: ${NOTIFICATION_APP_PORT_USERS}
    networks:
      - kafka-net

  android_worker:
    build:
      context: ./android_worker
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      ENV: ${NOTIFICATION_ENV}
      FIREBASE_PROJECT_ID: ${NOTIFICATION_FIREBASE_PROJECT_ID}
      BROKER_URL: ${NOTIFICATION_BROKER_URL} # Connect to Kafka using the internal listener
    networks:
      - kafka-net
    volumes:
      - ${NOTIFICATION_FIREBASE_CREADENTIAL_VOLUME}:${NOTIFICATION_FIREBASE_CREATIALS_VOLUME_IN_DOCKER}

  email_worker:
    build:
      context: ./email_worker
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      ENV: ${NOTIFICATION_ENV}
      API_TOKEN: ${NOTIFICATION_API_TOKEN}
      DOMAIN: ${NOTIFICATION_DOMAIN}
      EMAIL: nphilibert17@gmail.com
      BROKER_URL: ${NOTIFICATION_BROKER_URL}
    networks:
      - kafka-net

networks:
  kafka-net:
    driver: bridge
